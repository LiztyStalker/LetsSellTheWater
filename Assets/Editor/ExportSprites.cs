//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.IO;
using System.Security.Cryptography;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization;
using UnityEngine;
using UnityEditor;

public class SpriteScriptableObject : ScriptableObject{
	public Sprite sprite;
}

public class ExportSprites
{
	[MenuItem("Export/Create/SpriteScriptableObject")]
	static void Export(){
		try{
			foreach (var sprite in Selection.objects) {
				if(sprite is Sprite == false){
					continue;
				}

				SpriteScriptableObject sp = ScriptableObject.CreateInstance<SpriteScriptableObject>();
				sp.sprite = sprite as Sprite;
				AssetDatabase.CreateAsset(sp, string.Format("Assets/Resources/ScriptableObjects/{0}.asset", sprite.name));
			}
			AssetDatabase.SaveAssets ();
			Debug.Log ("AssetDatabase 생성 완료");
		}
		catch(UnityException e){
			Debug.LogError("AssetDatabase 생성 오류 : " + e.Message);
		}
	}

//	[MenuItem("Export/Create/EncryptTextDataExport")]
//	static void EncryptExport(){
//
//
//		Debug.Log ("암호화 시작");
//		TextAsset textAssets = Selection.objects[0] as TextAsset;
//
//		//for (int i = 0; i < textAssets.Length; i++) {
//
//
//		Debug.Log("name : " + Selection.objects[0].name);
////			CryptoStream cryptoStream = IODataClass.GetInstance.encrypting("Assets/Resources/Data/Data", Selection.objects[i].name);
////			{
////
////				BinaryFormatter bf = new BinaryFormatter();
////				bf.Serialize(cryptoStream, textAssets[i];
////
////				cryptoStream.Close();
////
////	             IODataClass.GetInstance.fileClose ();
////			}
//		//}
//
//	}
}


