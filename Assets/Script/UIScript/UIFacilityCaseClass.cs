//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
public class UIFacilityCaseClass : MonoBehaviour
{


	[SerializeField] SpriteRenderer m_sprite;
//	[SerializeField] SpriteRenderer m_customerSprite;
//	[SerializeField] GameObject m_customerBar;
	[SerializeField] UICustomerCaseClass m_customerCase;

	[SerializeField] Sprite[] productIcons;
	[SerializeField] GameObject m_productObject;
	[SerializeField] SpriteRenderer m_productIconRenderer;
	//[SerializeField] GUIText m_productText;

	[SerializeField] UICostSetClass m_costSetClass;

	Vector2 productPos;
	UIProductionLineClass m_parent;
	FacilityClass m_facility = null;
	//CustomerClass m_customer = null;
	Animator m_animator;
	bool isparent = false;

	public FacilityClass facility{ get { return m_facility; } }
	public UIProductionLineClass parent{ get { return m_parent; } }
	public bool isCustomer(){return m_customerCase.isCustomer();}

	public void pinecolaSet(int count){
		m_costSetClass.pinecolaSet (count);
	}

	public void costSet(int count){
		if(m_facility != null) m_costSetClass.costSet (m_facility.facilityType, count);
	}

	public int isUseBottle(int count){
		return m_customerCase.isUseBottle (count);
	}

	void Awake(){
		Vector2 productPos = new Vector2(m_productObject.transform.localPosition.x, m_productObject.transform.localPosition.y);
	}

	public void customerBottle(out int bottle, out int count){
		m_customerCase.customerBottle (out bottle, out count);
	}	

	public int customerBottleCount(){
		return m_customerCase.customerBottleCount ();
	}

	public void setParent(UIProductionLineClass parent){
		m_parent = parent;
		m_animator = GetComponent<Animator> ();


	}

	public void setCostSetPos(UIProductionAreaClass area){
		m_costSetClass.costSetPos (area);
	}

	/// <summary>
	/// 시설 삽입 
	/// </summary>
	/// <param name="facility">Facility.</param>
	public void initFacilityCase(FacilityClass facility){

		m_facility = facility;

//		Debug.Log ("시설 삽입");

		//이미지 보여주기

		if (m_facility != null) {
			m_sprite.sprite = m_facility.sprite;

			//판매시설이 아닐때
			if(m_facility.facilityType != TYPE_FACILITY.BUSINESS){
				//손님 반납
				returnCustomer();
			}


		}
		else {
			m_sprite.sprite = FacilityPackageClass.GetInstance.getEmptyFacilitySprite ();
			m_animator.speed = 1f;
			returnCustomer();
		}

		m_parent.employeeCase.readyProduct ();

	}
	

	/// <summary>
	/// 손님 반납
	/// </summary>
	private void returnCustomer(){
		if (m_customerCase.isCustomer ()) {
			m_customerCase.initCustomerCase (this, null, null);
			AccountClass.GetInstance.addCustomer ();
		}
	}



	/// <summary>
	/// 소비자 배치
	/// </summary>
	/// <param name="customer">Customer.</param>
	public bool setCustomer(CustomerClass customer){


		if (!m_parent.employeeCase.isExhaust ()) {
			m_customerCase.initCustomerCase(this, customer, m_parent.employeeCase.employee);
			m_parent.employeeCase.readyProduct (); //준비
			return true;
		}

		return false;

	}



//	IEnumerator productAnimation(TYPE_FACILITY facilityType, int count){
//
//		m_productObject.SetActive (true);
//
//		m_productIconRenderer.sprite = productIcons[(int)facilityType];
//		m_productText.text = string.Format("+{0}", count);
//
//		m_productText.transform.position = parent.area.transform.position + Camera.main.WorldToViewportPoint (m_productText.transform.position - parent.area.transform.position);
//
//		float time = 1f;
//
//		while(time > 0f){
//			time -= 0.1f;
//			Vector2 movePos = m_productObject.transform.localPosition;
//			m_productObject.transform.localPosition = movePos + Vector2.up * 0.01f;
//			yield return new WaitForSeconds(0.1f);
//		}
//
//		m_productObject.SetActive (false);
//		m_productObject.transform.localPosition = productPos;
//
//
//
//
//	}



}


