//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public class UICustomerCaseClass : MonoBehaviour
{
	[SerializeField] SpriteRenderer m_customerSprite;
	[SerializeField] SpriteRenderer m_customerBottle;
	[SerializeField] SpriteRenderer m_customerBar;
//	[SerializeField] GUIText m_customerText;

	UIFacilityCaseClass m_parent;

	CustomerClass m_customer = null;
	EmployeeClass m_employee = null;
	readonly Vector3 customerBarSize = new Vector3 (0.8f, 0.3f);

	void Awake(){

		//m_customerText.transform.position = m_parent.parent.area.transform.position + Camera.main.WorldToViewportPoint (m_customerText.transform.position - m_parent.parent.area.transform.position);

	}

	public bool isCustomer(){return (m_customer != null) ? true : false;}

	public void initCustomerCase(UIFacilityCaseClass parent, CustomerClass customer, EmployeeClass employee){
		m_parent = parent;
		m_customer = customer;
		m_employee = employee;
		customerView ();
	}

	public void customerBottle(out int bottle, out int count){
		if (m_customer != null) {
			bottle = m_customer.volume;
			count = m_customer.count;
		} else {
			bottle = -1;
			count = 1;
		}
	}	
	
	public int customerBottleCount(){
		if (m_customer != null)
			return m_customer.count;
		else
			return -1;
	}

	/// <summary>
	/// 병 사용 여부
	/// </summary>
	/// <returns>The use bottle.</returns>
	/// <param name="cost">Cost.</param>
	public int isUseBottle(int cost = 50){
		int tmpCost = cost;

		//매력 1당 가격 0.5% 증가
		tmpCost += (int)((float)tmpCost * (float)m_employee.charm * 0.005f);

		if (AccountClass.GetInstance.useBottle (m_customer.volume, m_customer.count, tmpCost)) {
			AccountClass.GetInstance.reputationAccount.upCustomer (m_customer.typeCustomer, m_customer.count);
		} else {
			AccountClass.GetInstance.reputationAccount.downCustomer(m_customer.typeCustomer, m_customer.count);
			tmpCost = 0;
		}
		return tmpCost * m_customer.count;
	}

	private void customerView(){

		if (m_customer != null) {
			Debug.Log("손님 입장 : " + m_customer.name);
			gameObject.SetActive (true);
			m_customerSprite.sprite = m_customer.sprite;
			//m_customerText.text = string.Format("x{0}", m_customer.count);

			StartCoroutine(waitCustomer());
		} else {
			Debug.Log("손님 나감");
			gameObject.SetActive(false);
			m_customerSprite.sprite = null;
			//m_customerText.text = "";
		}
	}

	private void waitCustomerView(){
		float ratio = m_customer.waitTimeRatio ();
		m_customerBar.transform.localScale = new Vector3 (customerBarSize.x * ratio, customerBarSize.y);
	}
	
	
	IEnumerator waitCustomer(){

		while (m_customer != null) {


			//매력 1당 대기시간 1% 증가
			float timeCal = m_employee.charm * 0.01f;

			if(m_customer.useWaitTime(0.1f - timeCal)){
				waitCustomerView();
			}
			else{
				UIMadiatorClass.UIEffectSoundPlayer(m_parent.parent.audioSource, TYPE_AUDIO.WARNING);
				UIMadiatorClass.UITextPanelView(null, "기다리다 지친 손님이 불만을 품고 떠났습니다.");
				break;
			}
			yield return new WaitForSeconds(0.1f);
		}

		if(m_customer != null)
			initCustomerCase (m_parent, null, null);
		
	}


}


