//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;

public class UIEmployeeCaseClass  : MonoBehaviour
{

	const float c_sec = 1f;
	const float c_immersionTime = 10f;

	UIProductionLineClass m_parent;
	EmployeeClass m_employee;
	Animator m_animator;

	[SerializeField] UIEmployeeSpriteClass m_employeeSprite;
	[SerializeField] GameObject m_workingBar;
	[SerializeField] GameObject m_immersionObject;


	public EmployeeClass employee{ get { return m_employee; } }

	Vector3 workingBarSize = new Vector3 (0.8f, 0.3f);

	bool m_isWork = false;
	//bool m_isExhaust = false;
	float m_workTime = 0f;

	int m_preValue = 0; //미리준비

	Coroutine cor_immersion = null;

	public void setParent(UIProductionLineClass parent){
		m_parent = parent;
		m_animator = GetComponent<Animator>();
		m_immersionObject.SetActive (false);
		waitProduct ();
	}

	public bool isRunning(){
		return m_isWork;
	}

	public bool isExhaust(){
		if (m_employee != null)
			return m_employee.isExhaust;
		else 
			return true;
		
	}

	/// <summary>
	/// 직원 배치
	/// </summary>
	/// <param name="employee">Employee.</param>
	public void initEmployeeCase(EmployeeClass employee){

		m_employee = employee;

//		Debug.Log ("직원 배치");
		
		//이미지 보여주기
		
		if (m_employee != null) {
			m_employeeSprite.setSprite(employee.icons);
			m_animator.SetBool ("isExhaust", m_employee.isExhaust);
			m_animator.SetBool ("isImmersion", m_employee.isImmersion);
			m_workingBar.SetActive(true);
		}
		else{
			m_employeeSprite.setSprite(null);
			m_animator.SetBool ("isExhaust", false);
			m_animator.SetBool ("isImmersion", false);
			m_isWork = false;
			m_workTime = 1f;
			m_preValue = 0;

			if(cor_immersion != null)
				StopCoroutine (cor_immersion);

			m_workingBar.SetActive(false);

		}

		m_animator.SetBool ("isWork", false);

		readyProduct();


	}


	/// <summary>
	/// 작업시간 설정
	/// </summary>
	/// <param name="time">Time.</param>
	private void setWorkTime(float time, TYPE_FACILITY facilityType = TYPE_FACILITY.NONE){
		if (time == 0f) {
			m_workTime = 1f;
			m_isWork = false;
		}
		else {
			if (m_employee != null){

				//기본 속도
				m_workTime = (c_sec / time) + m_employee.quickness * 0.01f;

				//해당하는 시설과 능력치가 맞으면 그만큼 빨라짐
				switch(facilityType){
				case TYPE_FACILITY.PRODUCT:
					m_workTime += m_employee.health * 0.005f;
					break;
				case TYPE_FACILITY.MANUFACTURE:
					m_workTime += m_employee.quickness * 0.005f;
					break;
				case TYPE_FACILITY.BUSINESS:
					m_workTime += m_employee.charm * 0.005f;
					break;
				case TYPE_FACILITY.RESEARCH:
					m_workTime += m_employee.intelligence * 0.005f;
					break;
				}

				//몰입 상태이면 속도 2배 빨라짐
				if(cor_immersion != null)
					m_workTime *= 1.5f;

				m_isWork = true;
				m_employeeSprite.changeWork();
			}
			else{
				m_workTime = 1f;
				m_isWork = false;
			}
		}

		//작업량
		//작업속도
		//직원의 1회 행동 = 시간
		//시설의 1회 행동 = 시간
		//1 = 1초
		//5 = 5초 -> 1/5 = 0.2f
		//0.5 = 0.5초 -? 1/0.5 = 2f;

//		Debug.Log("workTime : " + m_workTime);
		if (m_workTime < 0.001f)
			m_workTime = 0.001f;


		m_animator.speed = m_workTime;
		m_animator.SetBool ("isWork", m_isWork);

	}

	/// <summary>
	/// 진행 시작
	/// </summary>
	private void startProduct(){

		if(m_parent.facilityCase.facility != null){
			//m_isExhaust = false;


			setWorkTime(m_parent.facilityCase.facility.time, m_parent.facilityCase.facility.facilityType);
			m_parent.removeWaitLine();




		}
		else{
			//m_isExhaust = true;
			waitProduct();
		}
	}

	/// <summary>
	/// 진행 대기
	/// </summary>
	private void waitProduct(){
//		Debug.Log ("직원 대기 중");
		setWorkTime (0f);
	}

	/// <summary>
	/// 1회 작업 준비 - 애니메이션 연동 및 시작 이벤트
	/// </summary>
	/// 
	/// 리팩토링 필요
	public void readyProduct(){


		//직원이 있으면
		if (employee != null) {
			//스프라이트 초기화
			m_employeeSprite.initSprite ();
			//시설이 있으면
			if (m_parent.facilityCase.facility != null) {
				//휴식중이 아니면
				if (!m_employee.isExhaust) {
					//체력이 있으면
					if (healthCheck (10)) {

						switch (m_parent.facilityCase.facility.facilityType) {
						case TYPE_FACILITY.PRODUCT:
				//생산 - 없음
						//Debug.Log ("생산");

						//물이 넘침 여부 필요
							if (waterFlowCheck ()) {
								startProduct ();
							} else {
								waitProduct ();
							}
							break;
						case TYPE_FACILITY.MANUFACTURE:
						//물이 있는가 체크
							if (waterCheck ()) {
								//병이 넘침여부 필요

								if (bottleFlowCheck ()) {
									//물 미리 가져오기


									startProduct ();
								} else
									waitProduct ();
							} else {
								waitProduct ();
							}
							break;
						case TYPE_FACILITY.BUSINESS:
						//판매 - 손님 여부 - 병 여부
							if (customerCheck ()) {
								//물병 미리 가져오기

								Debug.Log("판매 시작");
								startProduct ();
							} else {
								Debug.Log("판매 불가");
								waitProduct ();
							}
							break;
						case TYPE_FACILITY.RESEARCH:
						//Debug.Log ("연구");
							if (researchCheck ()) {
								startProduct ();
							} else {
								waitProduct ();
							}
							break;
						}		

						//작업중이면 데이터 미리 가져오기
//					if(isRunning()){
//					}
					} else {
						//탈진상태로 전환

						//Debug.Log ("휴식 중");
						StartCoroutine (recoveryEmployee ());
						//휴식 이벤트 - 애니메이션 주기
						//휴식 플래그 업
						//휴식 끝나면 readyProduct 시작
					}

					healthBarView ();

				} else {
					//탈진상태로 전환
				
					//Debug.Log ("휴식 중");
					StartCoroutine (recoveryEmployee ());
					//휴식 이벤트 - 애니메이션 주기
					//휴식 플래그 업
					//휴식 끝나면 readyProduct 시작
				}
			} else {
				//시설과 직원이 없으면 아무것도 하지 않음
				//UIMadiatorClass.UITextPanelView(null, "직원 또는 시설이 없습니다. 자리에 배치하여 생산하세요.");
				waitProduct ();
			}
		}
	}

	private void healthBarView(){

		float ratio = m_employee.healthRatio ();
		m_workingBar.transform.localScale = new Vector3 (workingBarSize.x * ratio, workingBarSize.y);
//		Debug.Log ("ratio : " + ratio);
	}

	IEnumerator recoveryEmployee(){


		UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.SLEEP);

		while (m_employee != null) {
			//0.1초당 1% 회복
			m_employee.chargeHealth ((int)((float)m_employee.health * 0.01f));
			healthBarView ();

			m_animator.SetBool ("isExhaust", m_employee.isExhaust);
			m_employeeSprite.changeExhaust();
			if(!m_employee.isExhaust)
				break;

			yield return new WaitForSeconds (0.1f);
		}

		readyProduct ();

	}

	/// <summary>
	/// 1회 작업 도중 - 애니메이션 연동
	/// </summary>
	public void runProduct(){
		switch(m_parent.facilityCase.facility.facilityType){
		case TYPE_FACILITY.PRODUCT:
			//생산 - 없음
			//Debug.Log("생산1");
			break;
		case TYPE_FACILITY.MANUFACTURE:
			//제조 - 공간여부
			//Debug.Log("제조1");

			bottleCheck();
			break;
		case TYPE_FACILITY.BUSINESS:
			//Debug.Log("판매1");

			//판매 - 없음
			break;
		case TYPE_FACILITY.RESEARCH:
			//Debug.Log("연구1");
			
			//판매 - 없음
			break;
	}
}


	/// <summary>
	/// 1회 작업 완료 - 애니메이션 연동
	/// </summary>
	public void endProduct(){

		//대성공 확률 랜덤

		bool isPineCola = m_employee.isPineCola ();
		if (isPineCola) {
			//파인콜라 획득
			Debug.Log ("파인콜라 획득 : " + m_employee.name);
			UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.PINECOLA);
			m_animator.SetTrigger ("isPineCola");
			//m_employeeSprite.changeSuccess ();
			runProduct (m_parent.facilityCase.facility.facilityType, false, true);
		} else {

			//대성공 애니메이션
			bool isSuccessing = m_employee.isSuccessing ();
			if (isSuccessing) {
				Debug.Log ("대성공 : " + m_employee.name);
				m_animator.SetTrigger ("isSuccess");
				UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.SUCCESS);
				//m_employeeSprite.changeSuccess ();
			}
			else{
				UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.COST);
			}

			runProduct (m_parent.facilityCase.facility.facilityType, isSuccessing, isPineCola);
		}

		//Debug.Log("작업 완료");


		if (m_employee.workmanshipUpgrade ()) {
			//Debug.Log("숙련도 업 : " + m_employee.name);
			//몰입 이벤트 활성화
			cor_immersion = StartCoroutine(immersionCoroutine());
		}

		if (cor_immersion == null) {
			if (m_employee.useHealth (10) <= 0) {
				//스킬 발동 조건 필요
				if (m_employee.isHealthCharge ()) {
					//체력 충전 애니메이션
					//UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.PINECOLA);

					Debug.Log ("체력 충전 : " + m_employee.name);
					m_animator.SetTrigger ("isCharge");
					m_employeeSprite.changeSkill();
				}
			}
		}

		readyProduct ();
		//대기 활성화
		//m_parent.addWaitLine ();
	}


	IEnumerator immersionCoroutine(){
		UIMadiatorClass.UIEffectSoundPlayer(m_parent.audioSource, TYPE_AUDIO.ENERGY);
		m_employee.setImmersion ();
		m_animator.SetBool ("isImmersion", m_employee.isImmersion);
		m_immersionObject.SetActive (true);
		Debug.Log ("몰입 활성화");
		yield return new WaitForSeconds (c_immersionTime);
		Debug.Log ("몰입 종료");
		m_employee.resetImmersion ();
		m_animator.SetBool ("isImmersion", m_employee.isImmersion);
		m_immersionObject.SetActive (false);
		StopCoroutine (cor_immersion);
		cor_immersion = null;
	}

	/// <summary>
	/// 체력 체크
	/// </summary>
	private bool healthCheck(int count = 1){
		return employee.isHealth (count);
	}

	private bool useHealth(int count = 1){
		if (employee.useHealth (count) > 0) {
			return true;
		} else {
			return false;
		}

	}

	/// <summary>
	/// 소비자가 있는가 체크
	/// </summary>
	private bool customerCheck(){
		if (m_parent.facilityCase.isCustomer ()) {
			// 소비자 있음
			int bottle = -1;
			int count = 1;


			m_parent.facilityCase.customerBottle(out bottle, out count);

			if(AccountClass.GetInstance.isBottle(bottle, count)){
				//물병이 충분히 있음

				m_preValue = AccountClass.GetInstance.getBottle(bottle, count);
				//Debug.Log("병 가져옴 : " + m_preValue);

				return true;
			}
			else{
				//물병 없음
				UIMadiatorClass.UITextPanelView(null, "창고의 물병 재고가 떨어졌습니다. 물병을 충분히 확보해야 합니다.");
				m_parent.setBottle();
				return false;
			}
		}

		return false;

	}

	/// <summary>
	/// 물이 넘치는지 체크
	/// </summary>
	/// <returns><c>true</c>, if flow check was watered, <c>false</c> otherwise.</returns>
	private bool waterFlowCheck(){
//		if(AccountClass.GetInstance.max
		if (AccountClass.GetInstance.getWaterCheck(m_parent.facilityCase.facility.product)) {
			UIMadiatorClass.UITextPanelView(null, "물탱크의 물이 가득 찼습니다. 물을 평소보다 많이 소비하거나 물탱크를 확장해야 합니다.");
			return false;
		}
		return true;
	}

	/// <summary>
	/// 병이 넘치는지 체크
	/// </summary>
	/// <returns><c>true</c>, if flow check was bottled, <c>false</c> otherwise.</returns>
	private bool bottleFlowCheck(){
		if (AccountClass.GetInstance.getBottleCheck(m_parent.facilityCase.facility.product)) {
			UIMadiatorClass.UITextPanelView(null, "창고의 물병이 가득 찼습니다. 물병을 평소보다 많이 소비하거나 창고를 확장해야 합니다.");
			return false;
		}

		m_preValue = AccountClass.GetInstance.getWater(m_parent.facilityCase.facility.product * 50);

		return true;
	}

	/// <summary>
	/// 물이 있는가 체크 
	/// </summary>
	private bool waterCheck(){
		if (m_parent.facilityCase.facility != null) {
			if (AccountClass.GetInstance.water >= m_parent.facilityCase.facility.product * 50) {
				//물이 충분히 있음
				return true;
			}
			else{
				//물이 충분하지 않음
				UIMadiatorClass.UITextPanelView(null, "물탱크의 물 재고가 떨어졌습니다. 물을 충분히 확보해야 합니다.");
				m_parent.setWater();
				return false;
			}
		} 
		else {
			//시설이 없음
			return false;
		}

	}

	/// <summary>
	/// 창고에 공간이 있나 체크
	/// </summary>
	public bool bottleCheck(){
		if (AccountClass.GetInstance.getBottlePercent () < 1f) {
			//공간이 있음

			return true;
		} else {
			//공간이 없음
			UIMadiatorClass.UITextPanelView(null, "창고가 꽉 찼습니다. 창고를 늘리거나 재고를 소모해야 합니다.");

			m_parent.setBottle();
			return false;
		}
	}

	/// <summary>
	/// 연구 데이터가 있나 체크
	/// </summary>
	/// <returns><c>true</c>, if check was researched, <c>false</c> otherwise.</returns>
	private bool researchCheck(){
		if (AccountClass.GetInstance.researchAccount.nowResearch () != null) {
			return true;
		} else {
			UIMadiatorClass.UITextPanelView(null, "더이상 연구할 데이터가 없습니다. 연구 데이터를 선택해주세요.");

			m_parent.setResearch ();
			return false;
		}
	}

	/// <summary>
	/// 1회 행동
	/// </summary>
	public void runProduct(TYPE_FACILITY typeFacility, bool isSuccess = false, bool isPineCola = false){
		//1회 행동
		
		if (m_parent.facilityCase.facility != null) {
			if (m_parent.facilityCase.facility.facilityType == typeFacility) {


				//대성공
				int rate = (isSuccess) ? 2 : 1;
				int count = m_parent.facilityCase.facility.product * rate;
				
				if(!isPineCola){
					
					switch(typeFacility){
					case TYPE_FACILITY.PRODUCT:
						AccountClass.GetInstance.addWater(count, m_parent.facilityCase.facility.contamination);
						break;
					case TYPE_FACILITY.MANUFACTURE:

						if(AccountClass.GetInstance.addBottle(50, count) >= 0){
							Debug.Log("병 생산 : " + count);
						}
						else{
							Debug.Log("물 부족");
						}
						break;
					case TYPE_FACILITY.BUSINESS:
						count = m_parent.facilityCase.isUseBottle(count);
						
						if(count != 0)
							Debug.Log("판매됨");
						else
							Debug.Log("판매 불가");
						
						m_parent.facilityCase.setCustomer(null);
						break;
					case TYPE_FACILITY.RESEARCH:
						ResearchClass research = AccountClass.GetInstance.researchAccount.nowResearch();
						if(research != null){
							if(AccountClass.GetInstance.researchAccount.runResearch(count)){
								UIMadiatorClass.UITextPanelView(research.sprite, "연구 완료");
								string index = research.key.Substring (2, 2);
								UIMadiatorClass.UIResearchManagementPanel(int.Parse (index), false);
							}
							else{
								Debug.Log("연구 중");
							}
						}
						break;
					}
					
					if(count != 0) m_parent.facilityCase.costSet(count);

					m_parent.wakeUp (typeFacility);

				}
				else{
					m_parent.facilityCase.pinecolaSet(1);
				}
				
			}
		}
	}

}

 