//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Collections;
using UnityEngine;
using System.Linq;

public class FacilityPackageClass : SingletonClass<FacilityPackageClass>
{

	const char c_lineChar = '\n';
	const char c_splitChar = '\t';
	const string s_emptyFacilityKey = "RS02----";

	Sprite m_emptyFacility;
	List<FacilityClass> m_facilityList = new List<FacilityClass> ();

	TextAsset m_textAsset;

	public List<FacilityClass> getFacilityList (int index = 0){
		List<FacilityClass> tmpList = new List<FacilityClass> ();
		foreach (string key in AccountClass.GetInstance.researchAccount.facilityLv) {
			if(int.Parse(key.Substring(4, 1)) == index)
				tmpList.Add(getLinqFacility(key));
		}

		tmpList.Sort ((FacilityClass fac1, FacilityClass fac2) => fac1.key.CompareTo (fac2.key));
		

		return tmpList;
	}

	public FacilityPackageClass ()
	{
		//initParsing ();
	}

	public bool assetBundleInitParsing (TextAsset textAsset){
		
		m_textAsset = textAsset;
		if (m_textAsset != null) {
			initParsing ();
			return true;
		} else {
			throw new MissingReferenceException("TextAsset 없음 : " + textAsset);
			return false;
		}
		
	}
	
	private void initParsing(){

		Sprite[] sprites = Resources.LoadAll<Sprite> ("Image/Facility");

//		TextAsset textAsset = (TextAsset)Resources.Load ("Data/Facility/Facility", typeof(TextAsset));
		string[] splitList = m_textAsset.text.Split (c_lineChar);

		//일반 스프라이트
		m_emptyFacility = sprites.Where(sprite => sprite.name.Equals(s_emptyFacilityKey)).Select(sprite => sprite).SingleOrDefault();

		//모든 데이터 삽입
		for (int i = 0; i < splitList.Length; i++) {
			
			if(splitList[i] == "")
				continue;
			
			string[] subSplit = splitList[i].Split(c_splitChar);

			Sprite selectSprite = sprites.Where(sprite => sprite.name.Equals(subSplit[0])).Select(sprite => sprite).SingleOrDefault();

			if(selectSprite != null){

				TYPE_FACILITY typeFacility = (TYPE_FACILITY)int.Parse(subSplit[2]);
				int product = int.Parse(subSplit[3]);
				float time = float.Parse(subSplit[4]);
				int upkeep = int.Parse(subSplit[5]);
				int cost = int.Parse(subSplit[6]);
				float contamination = float.Parse(subSplit[7]);
				string contents = subSplit[8];
				m_facilityList.Add(new FacilityClass(selectSprite, subSplit[0], subSplit[1], typeFacility, time, product, upkeep, cost, contamination, contents));
				//Debug.Log(string.Format("{0} {1} {2} {3} {4} {5} {6} {7} {8}", selectSprite, subSplit[0], subSplit[1], typeFacility, time, product, upkeep, cost, contamination));
			}
			else{
				Debug.Log("데이터 없음 : " + subSplit[0]);
			}
		}
	}
	

//	public List<FacilityClass> getFacilityList(){
//		return m_facilityList;
//	}

	public FacilityClass getFacility(FacilityClass facility){
		if(m_facilityList.Contains(facility)){
			//데이터 복사
			return new FacilityClass(facility);
		}

		Debug.Log ("데이터를 찾지 못했습니다. " + facility.name);
		return null;
	}

	public Sprite getEmptyFacilitySprite(){
		return m_emptyFacility;
	}

	public FacilityClass getFacility(string key){
		FacilityClass facility = getLinqFacility (key);
		if (facility == null)
			return facility;
		else
			return new FacilityClass(facility);
	}

	private FacilityClass getLinqFacility(string key){
		return m_facilityList.Where (facility => facility.key == key).Select (facility => facility).SingleOrDefault ();
	}
			
}


