//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public enum TYPE_FINANCE{MONTH, TOTAL, UTILITY, FACILITY, EMPLOY, RESEARCH, INTERESTRATE, REVENUE, SUBSIDY};

[Serializable]
public class FinanceAccountSerialClass : SerialClass{
	public int[] pastFinance;
	public int[] nowFinance;
	public int savingValue;
	public int loanValue;
	public float savingInterestRate;
	public float loanInterestRate;

	public int totalExpenditure; //총 지출
	public int totalProfit; //총 이익
	//public int companyValue;
}


public class FinanceAccountClass
{
	
	//int m_totalValue;


	//const int c_length = 8;

	//수입 및 지출
	//월
	//시설 유지비 및 구입, 판매비
	//직원 급여 및 고용비
	//연구 비용
	//금리
	//수익
	//지원금 - 퀘스트비, 대회 우승 등 추가 자원
	//총계

	int[] m_pastFinance;
	int[] m_nowFinance;

	int m_savingValue = 0;
	int m_loanValue = 0;

	float m_savingInterestRate = 0.1f;
	float m_loanInterestRate = 10f;
	
	int m_totalExpenditure = 0; //총 지출
	int m_totalProfit = 0; //총 이익

	public int length{ get { return Enum.GetValues(typeof(TYPE_FINANCE)).Length; } }

	public int totalExpenditure{ get { return m_totalExpenditure; } }
	public int totalProfit{ get { return m_totalProfit; } }
	public int totalCalculate{ get { return m_totalProfit - m_totalExpenditure; } }

	public int pastIndex(int index){
		if ((TYPE_FINANCE)index == TYPE_FINANCE.TOTAL) 
			return pastTotal ();
		else if(index < length)
			return m_pastFinance [index];
		return -1;
	}

	public int nowIndex(int index){
		if ((TYPE_FINANCE)index == TYPE_FINANCE.TOTAL) 
			return nowTotal ();
		else if(index < length)
			return m_nowFinance [index];
		return -1;
	}

	public int pastMonth{ get { return m_pastFinance [(int)TYPE_FINANCE.MONTH]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.MONTH] = value; } }
	public int pastUtilityBill{ get { return m_pastFinance[(int)TYPE_FINANCE.UTILITY]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.UTILITY] = value; } }
	public int pastFacility{ get { return m_pastFinance[(int)TYPE_FINANCE.FACILITY]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.FACILITY] = value; } }
	public int pastEmploy{ get { return m_pastFinance [(int)TYPE_FINANCE.EMPLOY]; } 
					private set { m_pastFinance [(int)TYPE_FINANCE.EMPLOY] = value; } }
	public int pastResearch{ get { return m_pastFinance[(int)TYPE_FINANCE.RESEARCH]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.RESEARCH] = value; } }
	public int pastInterestRate{ get { return m_pastFinance[(int)TYPE_FINANCE.INTERESTRATE]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.INTERESTRATE] = value; } }
	public int pastSubsidy{ get { return m_pastFinance[(int)TYPE_FINANCE.SUBSIDY]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.SUBSIDY] = value; } }
	public int pastRevenue{ get { return m_pastFinance[(int)TYPE_FINANCE.REVENUE]; } 
					private set{ m_pastFinance [(int)TYPE_FINANCE.REVENUE] = value; } }
//	public int pastTotalValue{ get { return pastTotal(); }}

	private int pastTotalData{ get { return m_pastFinance [(int)TYPE_FINANCE.TOTAL];} 
			set { m_pastFinance [(int)TYPE_FINANCE.TOTAL] = value; } }


	public int nowMonth{ get { return m_nowFinance [(int)TYPE_FINANCE.MONTH]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.MONTH] = value; } }
	public int nowUtilityBill{ get { return m_nowFinance[(int)TYPE_FINANCE.UTILITY]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.UTILITY] = value; } }
	public int nowFacility{ get { return m_nowFinance[(int)TYPE_FINANCE.FACILITY]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.FACILITY] = value; } }
	public int nowEmploy{ get { return m_nowFinance[(int)TYPE_FINANCE.EMPLOY]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.EMPLOY] = value; } }
	public int nowResearch{ get { return m_nowFinance[(int)TYPE_FINANCE.RESEARCH]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.RESEARCH] = value; } }
	public int nowInterestRate{ get { return m_nowFinance[(int)TYPE_FINANCE.INTERESTRATE]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.INTERESTRATE] = value; } }
	public int nowSubsidy{ 
		get { 
			Debug.Log("subsidy : " + m_nowFinance[(int)TYPE_FINANCE.SUBSIDY]);
			return m_nowFinance[(int)TYPE_FINANCE.SUBSIDY]; 
		} 
					private set{ m_nowFinance [(int)TYPE_FINANCE.SUBSIDY] = value; } }
	public int nowRevenue{ get { return m_nowFinance[(int)TYPE_FINANCE.REVENUE]; } 
					private set{ m_nowFinance [(int)TYPE_FINANCE.REVENUE] = value; } }
//	public int nowTotalValue{ get { return nowTotal(); }}

	private int nowTotalData{ get { return m_nowFinance [(int)TYPE_FINANCE.TOTAL]; } 
		set { m_nowFinance [(int)TYPE_FINANCE.TOTAL] = value; } }


//	public int companyValue{ get { return m_companyValue; } }

	
	public FinanceAccountClass (){
		m_pastFinance = new int[length];
		m_nowFinance = new int[length];

		m_nowFinance[0] = 1;		

	}

	/// <summary>
	/// 저장하기
	/// </summary>
	/// <returns>The data.</returns>
	public FinanceAccountSerialClass saveData(){
		FinanceAccountSerialClass financeData = new FinanceAccountSerialClass ();
		//financeData.companyValue = m_companyValue;
		financeData.loanValue = m_loanValue;
		financeData.loanInterestRate = m_loanInterestRate;
		financeData.nowFinance = m_nowFinance;
		financeData.pastFinance = m_pastFinance;
		financeData.savingInterestRate = m_savingInterestRate;
		financeData.savingValue = m_savingValue;
		financeData.totalExpenditure = m_totalExpenditure;
		financeData.totalProfit = m_totalProfit;

		return financeData;
//		IODataClass.GetInstance.saveData (financeData, "FinanceInfo");
	}

	/// <summary>
	/// 불러오기
	/// </summary>
	/// <returns><c>true</c>, if data was loaded, <c>false</c> otherwise.</returns>
	/// <param name="financeData">Finance data.</param>
	public bool loadData(FinanceAccountSerialClass financeData){
		if (financeData != null) {
			//m_companyValue = financeData.companyValue;
			m_loanValue = financeData.loanValue;
			m_loanInterestRate = financeData.loanInterestRate;
			m_nowFinance = financeData.nowFinance;
			m_pastFinance = financeData.pastFinance;
			m_savingInterestRate = financeData.savingInterestRate;
			m_savingValue = financeData.savingValue;
			m_totalExpenditure = financeData.totalExpenditure;
			m_totalProfit = financeData.totalProfit;

			Debug.Log("로드 완료 : " + GetType());
			return true;
		}
		Debug.Log("로드 불가능 : " + GetType());
		return false;
	}


	/// <summary>
	/// 자금 변동
	/// </summary>
	/// <param name="asset">Asset.</param>
	/// <param name="financeType">Finance type.</param>
	public void setAsset(int asset, TYPE_FINANCE financeType){
		m_nowFinance [(int)financeType] += asset;

		if(asset > 0) m_totalProfit += asset;
		else m_totalExpenditure += -asset;
//		Debug.Log("subsidy : " + m_nowFinance[(int)financeType]);
	}


	/// <summary>
	/// 저번 달 재정
	/// </summary>
	/// <value>The past total value.</value>
	private int pastTotal(){
		pastTotalData = 0;
		for(int i = 2; i < m_pastFinance.Length; i++){
			pastTotalData += m_pastFinance[i];
		}
		Debug.Log ("pastTotal : " + pastTotalData);
//		saveData ();

		return pastTotalData;
	}

	/// <summary>
	/// 이번 달 재정
	/// </summary>
	/// <value>The now total value.</value>
	private int nowTotal(){
		nowTotalData = 0;
		for(int i = 2; i < m_nowFinance.Length; i++){
			nowTotalData += m_nowFinance[i];
		}
		Debug.Log ("nowTotalData : " + nowTotalData);
//		saveData ();

		return nowTotalData;
	}

	/// <summary>
	/// 현재 재정 과거로 변경
	/// </summary>
	/// <param name="month">Month.</param>
	public void changePastFinance(int month){

		m_pastFinance[0] = m_nowFinance[0];
		m_nowFinance[0] = month;

		for (int i = 1; i < length; i++) {
			m_pastFinance[i] = m_nowFinance[i];
			m_nowFinance[i] = 0;
		}
//		saveData ();

	}

}


