//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

[Serializable]
public class SerialClass{}

[Serializable]
public class AccountSerialClass : SerialClass{
//	public Sprite companyIcon; //회사 아이콘
	

	public string companyName; //회사명
	public int grade; //등급
	public int runDate; //진행 날짜
	public int extendCount; //확장 수

//	public int totalExpenditure; //총 지출
//	public int totalProfit; //총 이익
//	
//	public int monthExpenditure; //월 지출
//	public int monthProfit; //월 이익
	
	public int assets; //자금
	public int pinecola; //캐시

	public int waterMax = 10000; //물 최대치 10L * 2
	public int water = 1000; //현재 물
	
	public int customerMax = 100; //소비자 최대치
	public int bottleMax = 100; //병 최대치
	
//	public int totalCustomer = 0;
//	public int totalVIP = 0;
	
	public float contamination = 1f; //현재 오염도

	public int viewIndex; //과거, 현재 화면 인덱스
	
	public List<FacilitySerialClass> facilities = new List<FacilitySerialClass>();
	public List<EmployeeSerialClass> employees = new List<EmployeeSerialClass>();
	public List<BottleSerialClass> bottles = new List<BottleSerialClass>();

//	public ReputationAccountSerialClass reputationAccountSerial;
	public AnotherAccountSerialClass anotherAccountSerial;
	public CustomerAccountSerialClass customerAccountSerial;
	public FinanceAccountSerialClass financeAccountSerial;
	public ResearchAccountSerialClass researchAccountSerial;
	public CalenderAccountSerialClass calenderAccountSerial;
	
}


[Serializable]
public class BottleSerialClass{
	public int key;
	public int value;
	public BottleSerialClass(int key, int value){
		this.key = key;
		this.value = value;
	}
}


public enum TYPE_GRADE {STARTUP, SOHO, SMALL, MID, COPER}

public class AccountClass : SingletonClass<AccountClass>
{
	const string c_fileName = "PlayerInfo";

//	const int c_extendValue = 100000; //확장 비용

	readonly int[] c_extendValues = {3, 5, 10, 50, 100};

	//직렬화 파싱 필요
//	ReputationAccountClass m_reputationAccount;// = new ReputationClass(); //인지도
	ResearchAccountClass m_researchAccount;// = new ResearchAccountClass(); //연구데이터
	AnotherAccountClass m_anotherAccount = new AnotherAccountClass (); //기타
	FinanceAccountClass m_financeAccount = new FinanceAccountClass (); //재정
	CustomerAccountClass m_customerAccount;// = new CustomerAccountClass();
	CalenderAccountClass m_calenderAccount;// = new CalenderAccountClass();

	List<FacilityClass> m_facilities; //시설들
	List<EmployeeClass> m_employees; //직원들
	Dictionary<int, int> m_bottleList = new Dictionary<int, int>(); //물병리스트
//	List<CustomerClass> m_customerList = new List<CustomerClass> ();


	int m_accountKey; //계정키

	//직렬화 가능
	Sprite m_companyIcon; //회사 아이콘
	string m_companyName; //회사명
	//구글 아이디 연동시 사용

	TYPE_GRADE m_grade = TYPE_GRADE.STARTUP; //등급 
	//0~4
	//0 스타트업
	//1 소호SOHO
	//2 중소기업
	//3 중견기업
	//4 대기업

	int m_runDate; //진행 날짜

	int m_extendCount; //확장 완료 수

	int m_assets; //자금
	int m_pinecola; //캐시

//	int m_companyValue = 0; //회사 가치는 회사 메뉴에서 보여줌
//	//회사 가치 - 현재 자금 + 시설비 + 토지

	int m_waterMax = 10000; //물 최대치 10L * 2
	int m_water = 1000; //현재 물

	int m_customerMax = 100; //소비자 최대치
	int m_bottleMax = 100; //병 최대치

	int m_viewIndex; //현재 화면 인덱스

	float m_contamination = 1f; //현재 오염도
	const float m_contaminationMax = 6f; //오염도 최대
//	float[] m_reputationList;



	public int waterMax{ get { return m_waterMax + (researchAccount.getExtendWaterBottle(m_waterMax)); } }
	public int bottleMax{ get { return m_bottleMax + (researchAccount.getExtendStorage(m_bottleMax)); } }
	public int customerMax{ get { return m_customerMax + (researchAccount.getExtendWaitingLine(m_customerMax)); } }

	public int assets{get{return m_assets;}}
	public int pinecola{ get { return m_pinecola; } }
	public int water{get{return m_water;}}
	public int bottle{get{
			return m_bottleList.Sum (cnt => cnt.Value);
		}
	}

	public int viewIndex{ get { return m_viewIndex; } set { m_viewIndex = value; } }

	public Sprite companyIcon{get {return m_companyIcon;}}
	public string companyName{ get { return m_companyName; } }
	public TYPE_GRADE grade{ get { return m_grade; } }
	public int extendCount{ get { return m_extendCount; } }
	public int extendValue{ get { return (c_extendValues.Length <= m_extendCount) ? -1 : c_extendValues[m_extendCount] * 10000; } }
	public int customer{get{return m_customerAccount.customer;}}
	public float contamination{ get { return m_contamination; } }
	public int runDate{ get { return m_runDate; } }

	public int companyValue{ get { return m_assets; } }

	public int totalExpenditure{ get { return financeAccount.totalExpenditure; } }
	public int totalProfit{ get { return financeAccount.totalProfit; } }
	public int totalCalculate{ get { return financeAccount.totalCalculate; } }

//	public int monthExpenditure{ get { return m_monthExpenditure; } }
//	public int monthProfit{ get { return m_monthProfit; } }
//	public int monthCalculate{ get { return m_monthProfit - m_monthExpenditure; } }

	public int totalCustomer{ get { return customerAccount.totalCustomer; } }
	public int totalVIP{ get { return customerAccount.totalVIP; } }

	public bool isFever{get{return m_customerAccount.isFever;}}

	public ResearchAccountClass researchAccount{ get { return m_researchAccount; } }
	public AnotherAccountClass anotherAccount{ get { return m_anotherAccount; } }
	public FinanceAccountClass financeAccount{ get { return m_financeAccount; } }
	public ReputationAccountClass reputationAccount{ get { return m_customerAccount.reputationAccount; } }
	public CustomerAccountClass customerAccount{ get { return m_customerAccount; } }
	public CalenderAccountClass calenderAccount{ get { return m_calenderAccount; } }

	public int facilityCount{ get { return m_facilities.Count; } }
	public int employeeCount{ get { return m_employees.Count; } }


	public bool isBGM{ get { return m_anotherAccount.isBackgroundMute; } set { m_anotherAccount.isEffectMute = value; } }
	public bool isEffect{ get { return m_anotherAccount.isEffectMute; } set { m_anotherAccount.isEffectMute = value; } }


	public int facilityPageMax(int pageMax = 10, TYPE_FACILITY type = TYPE_FACILITY.NONE, bool isNotUse = false){
		List<FacilityClass> facilityCnt = m_facilities.ToList<FacilityClass> ();
		if (type != TYPE_FACILITY.NONE) {
			facilityCnt = facilityCnt.Where(facility => facility.facilityType == type).ToList<FacilityClass>();
		}

		if (isNotUse) {
			facilityCnt = facilityCnt.Where(facility => facility.usePos == 0).ToList<FacilityClass> ();
		}

		return (facilityCnt.Count / pageMax) + ((facilityCnt.Count % pageMax == 0) ? 0 : 1);
	}
	public int employeePageMax(int pageMax = 10, TYPE_FACILITY type = TYPE_FACILITY.NONE, bool isNotUse = false){
		List<EmployeeClass> employeeCnt = m_employees.ToList<EmployeeClass> ();
//		if (type != TYPE_FACILITY.NONE) {
//			employeeCnt = employeeCnt.Where(employee => facility.facilityType == type).ToList<FacilityClass>();
//		}
		
		if (isNotUse) {
			employeeCnt = employeeCnt.Where(employee => employee.usePos == 0).ToList<EmployeeClass> ();
		}
		
		return (employeeCnt.Count / pageMax) + ((employeeCnt.Count % pageMax == 0) ? 0 : 1);

	}

	/// <summary>
	/// 시설 가져오기
	/// 페이지
	/// 생산, 가공, 판매, 연구
	/// 미사용
	/// 
	/// </summary>
	/// <returns>The facility.</returns>
	public List<FacilityClass> getFacility(TYPE_FACILITY type, int pageCnt = 10, int page = 0, bool isNotUse = false){
		List<FacilityClass> facilityArray = m_facilities.ToList<FacilityClass> ();
		if (type != TYPE_FACILITY.NONE) {
			facilityArray = m_facilities.Where (facility => facility.facilityType == type).ToList<FacilityClass>();		
		}

		if (isNotUse) {
			//미사용 출력
			facilityArray = facilityArray.Where (facility => facility.usePos == 0).ToList<FacilityClass>();

		}


		facilityArray = facilityArray.Skip (pageCnt * page).Take (pageCnt).ToList<FacilityClass>();

		//키를 기준으로 정렬
		//다른 기준으로 정렬하는 것도 만들어야 할 필요 있음
		facilityArray.Sort ((FacilityClass fac1, FacilityClass fac2) => fac1.key.CompareTo (fac2.key));

		return facilityArray;
	}

	/// <summary>
	/// 직원 가져오기
	/// 페이지
	/// 생산, 가공, 판매, 연구
	/// 미사용
	/// 
	/// </summary>
	/// <returns>The facility.</returns>
	public List<EmployeeClass> getEmployee(TYPE_FACILITY type, int pageCnt = 10, int page = 0, bool isNotUse = false){
		List<EmployeeClass> employeeArray = m_employees.ToList<EmployeeClass> ();
//		if (type == TYPE_FACILITY.NONE) {
//			//전체 출력
//			employeeArray = m_employees;
//		} else {
//			employeeArray = m_employees.Where (employee => employee.facilityType == type).ToList<FacilityClass>();		
//		}
		
		if (isNotUse) {
			//미사용 출력
			employeeArray = employeeArray.Where (employee => employee.usePos == 0).ToList<EmployeeClass>();
			
		}
		
		
		employeeArray = employeeArray.Skip (pageCnt * page).Take (pageCnt).ToList<EmployeeClass>();

		//키를 기준으로 정렬
		//다른 기준으로 정렬하는 것도 만들어야 할 필요 있음
		//employeeArray.Sort ((EmployeeClass emp1, EmployeeClass emp2) => emp1.key.CompareTo (emp2.key));

		
		return employeeArray;
	}

	/// <summary>
	/// 최고의 소비자 출력
	/// </summary>
	/// <returns>The customer.</returns>
	public TYPE_CUSTOMER getBestCustomer(){
		return m_customerAccount.getBestCustomer ();
	}

	/// <summary>
	/// 직원 등급에 대한 개수 가져오기
	/// </summary>
	/// <returns>The employee grade count.</returns>
	/// <param name="index">Index.</param>
	public int getEmployeeGradeCount(int index){
		string keyindex = string.Format ("EP{0:d2}", index);
		return m_employees.Where (employ => employ.key.Contains (keyindex)).Count ();
	}

	/// <summary>
	/// 지역 확장
	/// </summary>
	/// <returns>The extend count.</returns>
	public void setExtendCount(int count){
		m_extendCount = count - 1;
	}

	/// <summary>
	/// 병의 유무 판단
	/// </summary>
	/// <returns><c>true</c>, 병 있음 <c>false</c> 병 없음.</returns>
	/// <param name="bottleSize">Bottle size.</param>
	/// <param name="bottleCount">Bottle count.</param>
	public bool isBottle(int bottleSize, int bottleCount = 1){
		if (m_bottleList.ContainsKey (bottleSize)) {
			return (m_bottleList [bottleSize] > bottleCount - 1) ? true : false;
		}
		return false;

	}

	//비율 계산
	public float getWaterPercent(){
		return PrepClass.ratioCalculate((float)m_water, (float)waterMax);
	}
	public float getBottlePercent(){
		return PrepClass.ratioCalculate ((float)bottle, (float)bottleMax);
	}
	public float getCustomerPercent(){
		return PrepClass.ratioCalculate((float)customer, (float)customerMax);
	}


	public bool getWaterCheck(int count){
		return (m_water + count > m_waterMax) ? true : false;
	}

	public bool getBottleCheck(int count){
		return (bottle + count > bottleMax) ? true : false;
	}
	

//	private float ratioCalculate(float now, float max){
//
//		
//	}

	/// <summary>
	/// 사용중인 시설 가져오기
	/// </summary>
	/// <returns>The use facility.</returns>
	/// <param name="usePos">시설 위치.</param>
	public FacilityClass getUseFacility(int usePos){
//		Debug.Log ("사용중인 시설");
		if (usePos == 0)
			return null;
		return m_facilities.Where (facility => facility.usePos == usePos).Select (facility => facility).SingleOrDefault ();
	}

	/// <summary>
	/// 일하는 직원 가져오기
	/// </summary>
	/// <returns>The use facility.</returns>
	/// <param name="usePos">직원 위치.</param>
	public EmployeeClass getWorkEmployee(int usePos){
//		Debug.Log ("사용중인 시설");
		if (usePos == 0)
			return null;
		return m_employees.Where (employee => employee.usePos == usePos).Select (employee => employee).SingleOrDefault ();
	}

	public AccountClass ()
	{
//		m_reputationAccount = new ReputationAccountClass(this); //인지도
		m_calenderAccount = new CalenderAccountClass(this); //달력
		m_customerAccount = new CustomerAccountClass(this); //소비자
		m_researchAccount = new ResearchAccountClass(); //연구데이터
//		m_anotherAccount = new AnotherAccountClass (); //기타
//		m_financeAccount = new FinanceAccountClass (); //재정
//		m_customerAccount = new CustomerAccountClass();

//		m_reputationList = new float[Enum.GetNames (typeof(TYPE_CUSTOMER)).Length];
		m_facilities = new List<FacilityClass> ();
		m_employees = new List<EmployeeClass> ();

		//m_facilities.Add(FacilityPackageClass.GetInstance.getFacility("RS020000"));
		//m_facilities.Add(FacilityPackageClass.GetInstance.getFacility("RS020001"));
		//m_facilities.Add(FacilityPackageClass.GetInstance.getFacility("RS021000"));
		//m_facilities.Add(FacilityPackageClass.GetInstance.getFacility("RS022000"));
		//m_facilities.Add(FacilityPackageClass.GetInstance.getFacility("RS023000"));

//		m_facilities [0].usePos = 1;
//		m_facilities [3].usePos = 3;
//		m_facilities [4].usePos = 4;

		m_companyName = "관리자";
		m_assets = 10000;
		m_pinecola = 10;
//		m_water = 1000;
//		m_customerMax = 1000;
//		m_bottleMax = 1000;
//		m_contamination = 1f;
		Debug.Log ("초기화 완료");

		//물병 통일 50으로
		m_bottleList.Add (50, 10);


	}

	/// <summary>
	/// 파인콜라 사용
	/// </summary>
	/// <returns>The pine cola.</returns>
	/// <param name="pinecola">Pinecola.</param>
	public int usePineCola(int pinecola){
		if (m_pinecola - pinecola >= 0) {
			m_pinecola -= pinecola;
//			saveData ();
			return m_pinecola;
		}
		return m_pinecola - pinecola;
	}

	/// <summary>
	/// 시설 삽입
	/// </summary>
	/// <param name="facility">Facility.</param>
	public bool addFacility(FacilityClass facility){
		if ( m_assets >= facility.cost) {
			addAssets (-facility.cost, TYPE_FINANCE.FACILITY);
			m_facilities.Add (new FacilityClass (facility));
			return true;
		}
		return false;
	}

	/// <summary>
	/// 직원 채용
	/// </summary>
	/// <param name="employee">Employee.</param>
	public bool hireEmployee(EmployeeClass employee){
		if (m_assets >= employee.employmentFee) {
			addAssets (-employee.employmentFee, TYPE_FINANCE.EMPLOY);
			m_employees.Add (new EmployeeClass (employee));
			return true;
		}
		return false;
	}


	/// <summary>
	/// 월 정산
	/// </summary>
	/// <returns><c>true</c>, if accounts was settled, <c>false</c> otherwise.</returns>
	public void monthlySettleAccounts(){
		giveSalary ();
		upkeepFacility ();
	}

	/// <summary>
	/// 월급 주기
	/// </summary>
	/// <returns><c>true</c>, if salary was given, <c>false</c> otherwise.</returns>
	private void giveSalary(){
		addAssets (-m_employees.Sum (employ => employ.salary), TYPE_FINANCE.EMPLOY);

	}

	/// <summary>
	/// 시설 유지비 소모
	/// </summary>
	/// <returns><c>true</c>, if facility was upkeeped, <c>false</c> otherwise.</returns>
	private void upkeepFacility(){
		addAssets (-m_facilities.Sum (facility => facility.upkeep), TYPE_FINANCE.FACILITY);
	}

	/// <summary>
	/// 직원의 유무 판단
	/// </summary>
	/// <returns><c>true</c>, if employee was ised, <c>false</c> otherwise.</returns>
	/// <param name="key">Key.</param>
	public bool isEmployee(string key){
		EmployeeClass empTmp = m_employees.Where (employee => employee.key == key).Select (employee => employee).SingleOrDefault ();
		if (empTmp == null)
			return false;
		return true;
	}

	/// <summary>
	/// 시설 판매하기
	/// </summary>
	/// <returns><c>true</c>, 시설 판매 완료, <c>false</c> 시설 판매 실패.</returns>
	/// <param name="facility">Facility.</param>
	public bool sellFacility(FacilityClass facility){
		try{
			int sell = facility.sell;
			m_facilities.Remove (facility);
			addAssets(sell, TYPE_FINANCE.FACILITY);
			return true;
		}
		catch{
			return false;
		}
	}

	/// <summary>
	/// 직원 해고하기
	/// </summary>
	/// <returns><c>true</c>, if employee was fired, <c>false</c> otherwise.</returns>
	/// <param name="employee">Employee.</param>
	public bool fireEmployee(EmployeeClass employee){
		try{
//			int sell = employee.sell;
			m_employees.Remove (employee);
			addAssets(0, TYPE_FINANCE.EMPLOY);

			return true;
		}
		catch{
			return false;
		}
	}
	

	/// <summary>
	/// 자금 삽입
	/// </summary>
	/// <param name="assets">Assets.</param>
//	private void addAssets(int assets){
//		m_assets += assets;
//	}

	/// <summary>
	/// 자금 삽입
	/// </summary>
	/// <param name="assets">Assets.</param>
	/// <param name="financeType">Finance type.</param>
	public void addAssets(int assets, TYPE_FINANCE financeType){
		Debug.Log ("자금 사용 : " + assets);
		m_financeAccount.setAsset(assets, financeType);
		m_assets += assets;
//		saveData ();

	}

	/// <summary>
	/// 파인콜라 삽입
	/// </summary>
	/// <param name="pinecola">Pinecola.</param>
	public void addPineCola(int pinecola){
		m_pinecola += pinecola;
//		saveData ();
	}

	/// <summary>
	/// 물 추가
	/// </summary>
	/// <param name="water">물</param>
	/// <param name="contamination">오염도.</param>

	public int addWater(int water, float contamination){
		//물 삽입
		m_water += water;
		//오염도 변경 (시설 오염도 - 현재 오염도) * 삽입되는 물 / (삽입되는 물 + 현재 물)
		m_contamination += (contamination - m_contamination) * (float)water / (float)m_water;
		//Debug.Log("오염도 : " + (contamination - m_contamination) * (float)water / (float)m_water + " " + (float)water / (float)m_water);
		return m_water;

	}

	/// <summary>
	/// 물 사용하기
	/// </summary>
	/// <param name="water">Water.</param>
//	public int useWater(int water){
//		//물 없어서 사용 못함 - 음수
//		if (m_water - water < 0)
//			return m_water - water;
//
//		m_water -= water;
////		saveData ();
//
//		return m_water;
//
//	}

	/// <summary>
	/// 물 가져오기 (음수이면 물 부족)
	/// </summary>
	/// <returns>The water.</returns>
	/// <param name="water">Water.</param>
	public int getWater(int water){
		if(m_water - water < 0)
			return m_water - water;

		m_water -= water;
		return water;
	}

	/// <summary>
	/// 병 삽입하기
	/// </summary>
	/// <returns>The bottle.</returns>
	/// <param name="bottleVolume">Bottle volume.</param>
	/// <param name="count">count.</param>
	public int addBottle(int bottleVolume, int count = 1){
		if (m_bottleList.ContainsKey (bottleVolume)) {
			m_bottleList [bottleVolume] += count;
			//Debug.Log("삽입 완료 : " + m_bottleList [bottleVolume]);
			return count;
		}

		return -1;
	}

	/// <summary>
	/// 병 수익 내기
	/// </summary>
	/// <returns><c>true</c>, if bottle was used, <c>false</c> otherwise.</returns>
	/// <param name="volume">Volume.</param>
	/// <param name="count">Count.</param>
	public bool useBottle(int volume, int count, int cost){
		if (m_bottleList.ContainsKey (volume)) {
			addAssets(cost * count, TYPE_FINANCE.REVENUE);
			return true;
		}
		return false;
	}


	/// <summary>
	/// 병 가져오기 (음수면 없음)
	/// </summary>
	/// <returns>The bottle.</returns>
	/// <param name="volume">Volume.</param>
	/// <param name="count">Count.</param>
	public int getBottle(int volume, int count){
		if (m_bottleList.ContainsKey (volume)) {
			if(m_bottleList[volume] >= count){
				m_bottleList [volume] -= count;
				return count;
			}
		}
		return -1;
	}

	/// <summary>
	/// 소비자 삽입
	/// </summary>
	/// <param name="customer">Customer.</param>
	public void addCustomer(){
		m_customerAccount.addCustomer();
//		saveData ();
	}

	/// <summary>
	/// 소비자 꺼내기
	/// </summary>
	/// <returns>The customer.</returns>
	public CustomerClass getCustomer(int index){
		return m_customerAccount.getCustomer (index);
	}

	/// <summary>
	/// 피버 삽입하기
	/// </summary>
	/// <returns><c>true</c>, if fever was set, <c>false</c> otherwise.</returns>
	/// <param name="cnt">Count.</param>
	public bool setFever(int cnt = 1){
		return m_customerAccount.setFever (cnt);
	}

	/// <summary>
	/// 피버 활성화 진행
	/// </summary>
	/// <returns><c>true</c>, if fever time was run, <c>false</c> otherwise.</returns>
	/// <param name="time">Time.</param>
	public void runFeverTime(float time){
		if (m_customerAccount.runFeverTime (time)) {
			m_customerAccount.resetFever();
			UIMadiatorClass.resetFeverTime();
		}
	}

	/// <summary>
	/// 저장하기 (Serialzation)
	/// </summary>
	/// <returns><c>true</c>, if data was saved, <c>false</c> otherwise.</returns>
	public bool saveData(){

		AccountSerialClass accountSerialData = new AccountSerialClass ();

		//accountSerialData.companyIcon = m_companyIcon;

		accountSerialData.companyName = m_companyName;
		accountSerialData.assets = m_assets;
		accountSerialData.pinecola = m_pinecola;
		accountSerialData.contamination = m_contamination;
		accountSerialData.extendCount = m_extendCount;
		accountSerialData.grade = (int)m_grade;
		accountSerialData.runDate = m_runDate;

		accountSerialData.water = m_water;
		accountSerialData.waterMax = m_waterMax;
		accountSerialData.bottleMax = m_bottleMax;
//		accountSerialData.bottles = new List<int> ();
		accountSerialData.customerMax = m_customerMax;

//		accountSerialData.monthExpenditure = m_monthExpenditure;
//		accountSerialData.monthProfit = m_monthProfit;
//
//		accountSerialData.totalCustomer = m_totalCustomer;
//		accountSerialData.totalExpenditure = m_totalExpenditure;
//		accountSerialData.totalProfit = m_totalProfit;
//		accountSerialData.totalVIP = m_totalVIP;

		accountSerialData.viewIndex = m_viewIndex;

		foreach (int key in m_bottleList.Keys) {
			accountSerialData.bottles.Add(new BottleSerialClass(key, m_bottleList[key]));
		}

		foreach(EmployeeClass employ in m_employees){
			accountSerialData.employees.Add(new EmployeeSerialClass(employ));
		}

		foreach(FacilityClass facility in m_facilities){
			accountSerialData.facilities.Add(new FacilitySerialClass(facility));
		}

		accountSerialData.researchAccountSerial = m_researchAccount.saveData ();
//		accountSerialData.reputationAccountSerial = m_reputationAccount.saveData ();
		accountSerialData.anotherAccountSerial = m_anotherAccount.saveData ();
		accountSerialData.customerAccountSerial = m_customerAccount.saveData ();
		accountSerialData.financeAccountSerial = m_financeAccount.saveData();
		accountSerialData.calenderAccountSerial = m_calenderAccount.saveData();
	

		return IODataClass.GetInstance.saveData (accountSerialData, c_fileName);
	}

	/// <summary>
	/// 불러오기
	/// </summary>
	/// <returns><c>true</c>, if data was loaded, <c>false</c> otherwise.</returns>
	public bool loadData(){
//		if(IODataClass.GetInstance.isFile (c_filename)){
		AccountSerialClass accountSerialData = IODataClass.GetInstance.loadData (c_fileName);
		if (accountSerialData != null) {
			loadData (accountSerialData);
			Debug.Log("최종 로드 완료");
			return true;
		}
		Debug.Log("로드 불가 : " + GetType());
		return false;
	}

	private void loadData(AccountSerialClass accountSerialData){


		m_companyName = accountSerialData.companyName;
		m_assets = accountSerialData.assets;
		m_pinecola = accountSerialData.pinecola;

		m_grade = (TYPE_GRADE)accountSerialData.grade;
		m_extendCount = accountSerialData.extendCount;
		m_contamination = accountSerialData.contamination;
		m_runDate = accountSerialData.runDate;

		m_water = accountSerialData.water;
		m_waterMax = accountSerialData.waterMax;
		m_bottleMax = accountSerialData.bottleMax;
		m_customerMax = accountSerialData.customerMax;

		//		accountSerialData.companyIcon = m_companyIcon;
//		m_monthExpenditure = accountSerialData.monthExpenditure;
//		m_monthProfit = accountSerialData.monthProfit;
//
//		m_totalCustomer = accountSerialData.totalCustomer;
//		m_totalExpenditure = accountSerialData.totalExpenditure;
//		m_totalProfit = accountSerialData.totalProfit;
//		m_totalVIP = accountSerialData.totalVIP;
		//accountSerialData.useCustomer = new List<int> ();// m_useCustomer;

		m_viewIndex = accountSerialData.viewIndex;

		m_bottleList.Clear ();
		foreach (BottleSerialClass bottle in accountSerialData.bottles) {
			m_bottleList.Add(bottle.key, bottle.value);
		}


		m_employees.Clear ();
		foreach (EmployeeSerialClass employSerial in accountSerialData.employees) {
			EmployeeClass employ = EmployeePackageClass.GetInstance.getEmployee(employSerial);
			if(employ != null){
				m_employees.Add(employ);
				Debug.Log("로드 직원 삽입 : " + employ.key);
			}
			else{
				Debug.Log("로드 직원 삽입 불가 : " + employSerial.key);
			}
		}


		m_facilities.Clear ();
		foreach (FacilitySerialClass facilitySerial in accountSerialData.facilities) {
			FacilityClass facility = FacilityPackageClass.GetInstance.getFacility(facilitySerial.key);
			if(facility != null){
				facility.setFacilitySerial(facilitySerial);
				m_facilities.Add(facility);
				Debug.Log("로드 시설 삽입 : " + facility.key);
			}
			else{
				Debug.Log("로드 시설 삽입 불가 : " + facilitySerial.key);
			}
		}

		m_researchAccount.loadData(accountSerialData.researchAccountSerial);
//		m_reputationAccount.loadData(accountSerialData.reputationAccountSerial);
		m_anotherAccount.loadData(accountSerialData.anotherAccountSerial);
		m_customerAccount.loadData(accountSerialData.customerAccountSerial);
		m_financeAccount.loadData(accountSerialData.financeAccountSerial);
		m_calenderAccount.loadData(accountSerialData.calenderAccountSerial);

	}







}


