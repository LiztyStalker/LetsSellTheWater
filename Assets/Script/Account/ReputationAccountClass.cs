//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

[Serializable]
public class ReputationAccountSerialClass : SerialClass{
	public List<BestCustomerSerialClass> bestCustomerList = new List<BestCustomerSerialClass>();
	public int[] customerMax;
	public int[] customerRatio;
	public int totalCustomer;
	public int totalVIP;
}


[Serializable]
public class BestCustomerSerialClass{
	public int key;
	public int value;
	public BestCustomerSerialClass(int key, int value){
		this.key = key;
		this.value = value;
	}
}


public class ReputationAccountClass
{
	const int c_reputationMin = 100;
	const int c_contiminationCount = 10;

	//피버 시 시간 배율
	const float c_feverValue = 0.25f;


	//손님 모이는 타이머 변위차
	//0.03~0.05
	const float c_reputateTimeOffset = 0.049f;

	//오프셋 0~1f
	const float c_reputateOffset = 1.25f;

	AccountClass m_parent;

	
	Dictionary<TYPE_CUSTOMER, int> m_useCustomer = new Dictionary<TYPE_CUSTOMER, int> (); //소비자 구입 지수
	

	int[] m_customerMax;
	int[] m_customerRatio;

	readonly float[] f_contRatio = {2f, 1.5f, 1f, 0.75f, 0.5f, 0.25f, 0f};

	int m_totalCustomer = 0;
	int m_totalVIP = 0;


	public int totalCustomer{ get { return m_totalCustomer; } }
	public int totalVIP{ get { return m_totalVIP; } }


	/// <summary>
	/// 해당하는 고객 인지도 가져오기 인덱서
	/// </summary>
	/// <param name="i">The index.</param>
	public float this[int i]{
		get{
			return PrepClass.ratioCalculate((float)m_customerRatio[i], (float)m_customerMax[i]);
		}
	}

	public ReputationAccountClass (AccountClass parent){
		m_parent = parent;
		m_customerMax = new int[Enum.GetValues (typeof(TYPE_CUSTOMER)).Length];
		m_customerRatio = new int[Enum.GetValues (typeof(TYPE_CUSTOMER)).Length];
		//ratioList = new int[Enum.GetValues (typeof(TYPE_CUSTOMER)).Length];


		m_customerRatio [(int)TYPE_CUSTOMER.CHILD] = 1000;
		m_customerRatio [(int)TYPE_CUSTOMER.TEENAGER] = 1500;
		m_customerRatio [(int)TYPE_CUSTOMER.ADULT] = 1000;
		m_customerRatio [(int)TYPE_CUSTOMER.MID] = 1000;
		m_customerRatio [(int)TYPE_CUSTOMER.OLD] = 1000;

		for (int i = 0; i < m_customerMax.Length; i++) {
			m_customerMax[i] = 10000;
		}

		foreach (TYPE_CUSTOMER customer in (TYPE_CUSTOMER[])Enum.GetValues(typeof(TYPE_CUSTOMER))) {
			m_useCustomer.Add(customer, 0);
		}

//		getReputateIndex ();
//		saveData ();
	}


	/// <summary>
	/// 최고의 소비자 가져오기
	/// </summary>
	/// <returns>The best customer.</returns>
	public TYPE_CUSTOMER getBestCustomer(){
		TYPE_CUSTOMER bestCus = TYPE_CUSTOMER.CHILD;
		foreach (TYPE_CUSTOMER customer in (TYPE_CUSTOMER[])Enum.GetValues(typeof(TYPE_CUSTOMER))) {
			if (m_useCustomer [bestCus] < m_useCustomer [customer])
				bestCus = customer;
		}
		return bestCus;
	}

	/// <summary>
	/// 저장하기
	/// </summary>
	/// <returns>The data.</returns>
	public ReputationAccountSerialClass saveData(){
		ReputationAccountSerialClass reputationData = new ReputationAccountSerialClass ();
		reputationData.customerMax = m_customerMax;
		reputationData.customerRatio = m_customerRatio;
		reputationData.totalCustomer = m_totalCustomer;
		reputationData.totalVIP = m_totalVIP;

		reputationData.bestCustomerList.Clear ();
		foreach (TYPE_CUSTOMER customer in m_useCustomer.Keys) {
			reputationData.bestCustomerList.Add(new BestCustomerSerialClass((int)customer, m_useCustomer[customer]));
		}

		return reputationData;
//		IODataClass.GetInstance.saveData (reputationData ,"ReputationInfo");
	}

	/// <summary>
	/// 불러오기
	/// </summary>
	/// <returns><c>true</c>, if data was loaded, <c>false</c> otherwise.</returns>
	/// <param name="reputationData">Reputation data.</param>
	public bool loadData(ReputationAccountSerialClass reputationData){
		if (reputationData != null) {
			m_customerMax = reputationData.customerMax;
			m_customerRatio = reputationData.customerRatio;
			m_totalCustomer = reputationData.totalCustomer;
			m_totalVIP = reputationData.totalVIP;

			m_useCustomer.Clear();
			foreach(BestCustomerSerialClass bestCustomerData in reputationData.bestCustomerList){
				m_useCustomer.Add((TYPE_CUSTOMER)bestCustomerData.key, bestCustomerData.value);
			}

			Debug.Log("로드 가능 : " + GetType());
			return true;
		}
		Debug.Log("로드 불가능 : " + GetType());
		return false;

	}

	/// <summary>
	/// 인지도 평균 가져오기
	/// </summary>
	/// <returns>The reputation.</returns>
	public float averageReputation(){
		return ((float)m_customerRatio.Sum ()) / ((float) m_customerMax.Sum ());
	}

	public float getReputateTime(){
		//총 인지도에 따른 루프 시간 가져오기
		float totalReputation = averageReputation () * 100f;

		if (totalReputation <= 0f) {
			totalReputation = 0.001f;
		}



		float reputateTime = (totalReputation / (totalReputation + (totalReputation * (totalReputation - 20f) * c_reputateTimeOffset))) * c_reputateOffset;







		//피버이면 시간이 매우 줄어듬 = 현재 4배
		if (m_parent.isFever) {
			reputateTime *= c_feverValue;
			m_parent.runFeverTime (reputateTime);
		}

		Debug.Log ("루프 시간 : " + reputateTime);


		//인지도가 0이면 10초 루프
		return reputateTime;
	}

	/// <summary>
	/// 인지도에 따른 손님 인덱스 가져오기
	/// </summary>
	/// <returns>The reputate index.</returns>
	public int getReputateIndex(){
		//인지도 계산 및 정렬 - 인지도가 낮은 순으로

		//

		//총합을 구함
		int totalReputation = m_customerRatio.Sum (x => x) + 1;
		//Debug.Log ("total : " + totalReputation);

		//인지도 정렬
		Dictionary<int, int> intDic = new Dictionary<int, int>();
		for(int i = 0; i < m_customerRatio.Length; i++){
			int ratio = m_customerRatio[i];
			//인지도가 같은 값이 나오면
			//인지도를 1추가 하고 반복
			while(intDic.ContainsKey(ratio)){
				ratio++;
			}
			intDic.Add(ratio, i);
		}

		//인지도 정렬
		intDic = intDic.OrderBy(x => x.Key).ToDictionary(x => x.Key, x=>x.Value);

		//비율 선택
		int current = UnityEngine.Random.Range (0, totalReputation);

		//루프 돌면서 비율보다 커지면 값 반환
		int sum = 0;
		foreach (int key in intDic.Keys) {
			sum += key;
			//Debug.Log("Current : " + current + " " + sum);
			if (sum <= current) {
				//Debug.Log ("reputation Index : " + intDic [key]);
				return intDic [key];
			}
		}

		return  (int)TYPE_CUSTOMER.TEENAGER;

	}

	/// <summary>
	/// 인지도 상승
	/// </summary>
	/// <param name="customer">Customer.</param>
	/// <param name="count">물병 개수.</param>
	public void upCustomer(TYPE_CUSTOMER customer, int count){
		m_totalCustomer++;
		m_useCustomer [customer]++;
		upData (ref m_customerRatio [(int)customer], ref m_customerMax [(int)customer], count);
		int addIndex = UnityEngine.Random.Range (0, Enum.GetNames (typeof(TYPE_CUSTOMER)).Length);
		upData (ref m_customerRatio [addIndex], ref m_customerMax [addIndex], count / 10);
		//		saveData ();

	}

	/// <summary>
	/// 인지도 하향
	/// </summary>
	/// <param name="customer">Customer.</param>
	/// <param name="count">물병 개수.</param>
	public void downCustomer(TYPE_CUSTOMER customer, int count){
		downData (ref m_customerRatio [(int)customer], count);
		int addIndex = UnityEngine.Random.Range (0, Enum.GetNames (typeof(TYPE_CUSTOMER)).Length);
		downData (ref m_customerRatio [addIndex], count / 10);
		//		saveData ();

	}

	/// <summary>
	/// 인지도 최대치 상승
	/// </summary>
	/// <param name="customer">Customer.</param>
	/// <param name="volume">양.</param>
	public void upMaxCustomer(TYPE_CUSTOMER customer, int volume){
		upMaxData(ref m_customerMax [(int)customer], volume);
//		saveData ();

	}

	/// <summary>
	/// 인지도 최대치 하향
	/// </summary>
	/// <param name="customer">Customer.</param>
	/// <param name="count">양.</param>
	public void downMaxCustomer(TYPE_CUSTOMER customer, int volume){
		downMaxData(ref m_customerRatio[(int)customer], ref m_customerMax [(int)customer], volume);
//		saveData ();
	}
	


	private void upData(ref int data, ref int dataMax, int count){

		if (count == 0)
			return;

		count = (int)((float)count * (float)c_contiminationCount * f_contRatio [ratioCalculate ()]);
		//Debug.Log ("upData : " + count);
		if (data + count > dataMax) {
			data = dataMax;
			return;
		}
		//피버 증가
		if (m_parent.setFever (1)) {
			//피버가 맥스이면
			//피버상태로 전환
			//메인 화면에서 피버 창 띄우기
			UIMadiatorClass.setFeverTime();
		}
		data += count;

	}

	private void downData(ref int data, int count){

		if (count == 0)
			return;

		count = count * c_contiminationCount;
		//Debug.Log ("downData : " + count);
		if (data - count < 0) {
			data = 0;
			return;
		}
		//피버 감소
		data -= count;
		
	}

	private int ratioCalculate(){
		return (int)Math.Truncate((double)AccountClass.GetInstance.contamination);
	}

	private void upMaxData(ref int dataMax, int volume){
		dataMax += volume;
	}

	private void downMaxData(ref int data, ref int dataMax, int volume){
		if (dataMax - volume < c_reputationMin) {
			dataMax = c_reputationMin;
		} else {
			dataMax -= volume;
		}

		if (dataMax < data) {
			data = dataMax;
		}
	}



}


