//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;





[Serializable]
public class CustomerAccountSerialClass : SerialClass{
//	public Queue<CustomerSerialClass> customerList = new Queue<CustomerSerialClass> ();

	public int customerCnt;
	public int feverOffset;
	public int feverCnt;
	public float feverTime;
	public float nowFeverTime;
	public bool isFever;

	public ReputationAccountSerialClass reputationAccountSerial;
}

public class CustomerAccountClass
{

	const string c_fileName = "CustomerInfo.dat";

//	Queue<CustomerClass> m_customerList = new Queue<CustomerClass> (); 
	//대기자 - 간단한 키로 이루어져 있어야 함
	//사용시 패키지에서 실체화하여 보여줌

	AccountClass m_parent;

	ReputationAccountClass m_reputationAccount;

	int m_customerCnt = 10;
	//소비자 명
	//소비자를 꺼내올 때마다 랜덤으로 가져오기
	const int c_feverMax = 100;
	int m_feverOffset = 0;
	int m_feverCnt = 0;

	float m_feverTime = 60f;
	float m_nowFeverTime = 0f;

	bool m_isFever = false;

//	int m_totalCustomer = 0;
//	int m_totalVIP = 0;


	public int customer{get{return m_customerCnt;}}
	public bool isFever{ get { return m_isFever; } }
	private int feverMax{ get { return c_feverMax + m_feverOffset; } }

	public int totalCustomer{ get { return m_reputationAccount.totalCustomer; } }
	public int totalVIP{ get { return m_reputationAccount.totalVIP; } }

	public ReputationAccountClass reputationAccount{ get { return m_reputationAccount; } }

	public CustomerAccountClass (AccountClass parent){
		m_parent = parent;
		m_reputationAccount = new ReputationAccountClass (parent);
	}





	/// <summary>
	/// 저장하기
	/// </summary>
	/// <returns>The data.</returns>
	public CustomerAccountSerialClass saveData(){
		CustomerAccountSerialClass customerData = new CustomerAccountSerialClass ();

		customerData.feverCnt = m_feverCnt;
		customerData.feverOffset = m_feverOffset;
		customerData.feverTime = m_feverTime;
		customerData.nowFeverTime = m_nowFeverTime;
		customerData.isFever = m_isFever;
		customerData.customerCnt = m_customerCnt;

		customerData.reputationAccountSerial = m_reputationAccount.saveData ();

//		customerData.customerList.Clear ();
//		foreach (CustomerClass customer in m_customerList) {
//			customerData.customerList.Enqueue(new CustomerSerialClass(customer));
//		}

		return customerData;
	}

	/// <summary>
	/// 불러오기
	/// </summary>
	/// <returns><c>true</c>, if data was loaded, <c>false</c> otherwise.</returns>
	/// <param name="customerSerialData">Customer serial data.</param>
	public bool loadData(CustomerAccountSerialClass customerSerialData){
		if (customerSerialData != null) {
			m_feverOffset = customerSerialData.feverOffset;
			m_feverCnt = customerSerialData.feverCnt;
			m_feverTime = customerSerialData.feverTime;
			m_nowFeverTime = customerSerialData.nowFeverTime;
			m_isFever = customerSerialData.isFever;
			m_customerCnt = customerSerialData.customerCnt;

			m_reputationAccount.loadData(customerSerialData.reputationAccountSerial);

//			foreach (CustomerSerialClass customerSerial in customerSerialData.customerList) {
//				CustomerClass customerData = CustomerPackageClass.GetInstance.
//				m_customerList.Enqueue();
//			}

			Debug.Log ("로드 완료 : " + GetType ());
			return true;
		}
		Debug.Log ("로드 불가능 : " + GetType ());
		return false;
	}





	/// <summary>
	/// 피버 타임 진행하기
	/// </summary>
	/// <returns><c>true</c>, if fever time was run, <c>false</c> otherwise.</returns>
	/// <param name="time">Time.</param>
	public bool runFeverTime(float time){
		m_nowFeverTime += time;
		Debug.Log ("feverTime : " + m_nowFeverTime);
		if (m_nowFeverTime > m_feverTime) {
			m_nowFeverTime = 0f;
			//			saveData ();
			return true;
		}
		return false;
	}
	
	
	/// <summary>
	/// 피버 증가 true이면 피버 활성화
	/// </summary>
	/// <returns><c>true</c>, if fever was set, <c>false</c> otherwise.</returns>
	/// <param name="cnt">Count.</param>
	public bool setFever(int cnt = 1){
		//피버상태가 아니면
		if (!m_isFever) {
			m_feverCnt += cnt;
			Debug.Log("피버 : " + m_feverCnt);
			if (m_feverCnt >= feverMax) {
				Debug.Log("피버 업");
				m_isFever = true;
				return true;
			}
			//return false;
		}
		
		return false;
	}
	
	/// <summary>
	/// 피버 종료
	/// </summary>
	public void resetFever(){
		m_feverCnt = 0;

		//피버 증가
		m_feverOffset += (int)((float)c_feverMax * 0.1f); //- 피버 감소량 연구
		m_isFever = false;
	}






	/// <summary>
	/// 소비자 삽입
	/// </summary>
	/// <param name="customer">Customer.</param>
	public void addCustomer(){//CustomerClass customer){
		m_customerCnt++;
	}
	
	/// <summary>
	/// 소비자 꺼내기
	/// </summary>
	/// <returns>The customer.</returns>
	public CustomerClass getCustomer(int index){
		if (m_customerCnt > 0) {
			m_customerCnt--;
			return CustomerPackageClass.GetInstance.getRandomCustomer (index);
		}
		else
			return null;
	}
	public TYPE_CUSTOMER getBestCustomer(){
		return m_reputationAccount.getBestCustomer ();
	}

}

