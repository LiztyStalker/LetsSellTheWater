//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public enum TYPE_SHOP{FACILITY, EMPLOYEE, CASH, ASSETS}


public class UIShopClass : UIObjectClass
{
	[SerializeField] Text m_titleText;
//	[SerializeField] Text m_employeeText;
	[SerializeField] RectTransform m_scrollPanel;
	[SerializeField] GameObject m_viewPanel;
	[SerializeField] Scrollbar m_scrollbar;
	[SerializeField] UIFacilitySummaryClass m_facilityPanel;
	[SerializeField] UIEmployeeSummaryClass m_employeePanel;
	[SerializeField] UICashSummaryClass m_pineColaPanel;
	[SerializeField] UICashSummaryClass m_assetPanel;


	[SerializeField] GameObject m_facilityBtnPanel;
	[SerializeField] GameObject m_employeeBtnPanel;
	[SerializeField] GameObject m_shopBtnPanel;

	[SerializeField] GameObject m_refreshPanel;
	[SerializeField] Text m_refreshTimerText;
	[SerializeField] Button m_refreshBtn;

	bool m_isRefreshBtn = true;

	Coroutine co_timer = null;

	//TYPE_SHOP shopType;
	DateTime m_nowTime;
//	readonly DateTimeOffset c_fiveMinute = new DateTimeOffset(0, 5, 0);
	
	List<GameObject> m_tmpList = new List<GameObject>();


//	void Start(){
//		m_refreshBtn.onClick.AddListener (new UnityEngine.Events.UnityAction (refreshBtnClicked));
//	}

	public void setShopView(TYPE_SHOP shopType){

		m_viewPanel.GetComponent<LayoutElement>().minWidth = m_scrollPanel.rect.width;
//		m_viewPanel.GetComponent<RectTransform>().

		//UIMadiatorClass.UIEffectSoundPlayer (TYPE_AUDIO.NONE);

		switch (shopType) {
		case TYPE_SHOP.FACILITY:
			facilitySelectBtnEvent();
			break;
		case TYPE_SHOP.EMPLOYEE:
			employeeSelectBtnEvent();
			break;
		case TYPE_SHOP.CASH:
			cashSelectBtnEvent();
			break;
		}

		m_scrollbar.value = 0f;

	}
	
	
/// <summary>
/// 시설 버튼 선택
/// </summary>
	public void facilitySelectBtnEvent(int index = 0){
		panelClear ();
		m_facilityBtnPanel.SetActive(true);
		m_employeeBtnPanel.SetActive(false);
		m_shopBtnPanel.SetActive (false);

		m_refreshPanel.SetActive (false);
		m_titleText.text = "시설구입";

		//계정에서 연구 완료된 데이터를 기준으로 시설 가져오기
		//현재 연구 데이터를 보냄
		List<FacilityClass> facilityList = FacilityPackageClass.GetInstance.getFacilityList (index);
		foreach (FacilityClass facility in facilityList) {
			GameObject tmpObj = (GameObject)Instantiate(m_facilityPanel.gameObject);
			tmpObj.GetComponent<UIFacilitySummaryClass>().setFacilityClass(this, facility);
			tmpObj.transform.SetParent(m_viewPanel.transform);
			m_tmpList.Add(tmpObj);
			//			m_shopPanel.transform;
		}
		gameObject.SetActive (true);
	}

	/// <summary>
	/// 구인 버튼 선택
	/// </summary>
	public void employeeSelectBtnEvent(int index = 0){


		panelClear ();
		m_facilityBtnPanel.SetActive(false);
		m_employeeBtnPanel.SetActive(false);
		m_shopBtnPanel.SetActive (false);

		m_refreshPanel.SetActive (true);
		m_titleText.text = "구인구직";

		//계정에서 연구 완료된 데이터를 기준으로 직원 가져오기
		//현재 연구 데이터를 보냄



		//현재 시간이 NULL이면 지금 시간 삽입
			//재구성
		//현재 시간이 NULL이 아니면 전 시간과 현재 시간 비교
			//시간이 넘으면 재구성
			//시간이 넘지 않으면 그대로 보여줌

		//재구성
		if(m_isRefreshBtn)
			AccountClass.GetInstance.anotherAccount.employeeRefreshTime = DateTime.Now;
		
		List<EmployeeClass> m_empList = EmployeePackageClass.GetInstance.getEmployeeList (m_isRefreshBtn);
		foreach (EmployeeClass employee in m_empList) {
			GameObject tmpObj = (GameObject)Instantiate (m_employeePanel.gameObject);
			tmpObj.GetComponent<UIEmployeeSummaryClass> ().setEmployeeClass (this, employee);
			tmpObj.transform.SetParent (m_viewPanel.transform);
			m_tmpList.Add (tmpObj);
		}

		m_isRefreshBtn = false;
		gameObject.SetActive (true);
		co_timer = StartCoroutine (timer ());
	}


	/// <summary>
	/// 상점 버튼 선택
	/// </summary>
	public void cashSelectBtnEvent(){

		panelClear ();
		m_facilityBtnPanel.SetActive(false);
		m_employeeBtnPanel.SetActive(false);
		m_shopBtnPanel.SetActive (true);
		m_refreshPanel.SetActive (false);

		for (int i = 0; i < m_pineColaPanel.indexCount; i++) {
			GameObject tmpObj = (GameObject)Instantiate(m_pineColaPanel.gameObject);
			tmpObj.GetComponent<UICashSummaryClass>().setData(i);
			tmpObj.transform.SetParent(m_viewPanel.transform);
			m_tmpList.Add(tmpObj);
		}
		gameObject.SetActive (true);

	}

	/// <summary>
	/// 상점 버튼에서 자금 선택
	/// </summary>
	public void assetsSelectBtnEvent(){

		panelClear ();
		m_facilityBtnPanel.SetActive(false);
		m_employeeBtnPanel.SetActive(false);
		m_shopBtnPanel.SetActive (true);
		m_refreshPanel.SetActive (false);

		for (int i = 0; i < m_assetPanel.indexCount; i++) {
			GameObject tmpObj = (GameObject)Instantiate(m_assetPanel.gameObject);
			tmpObj.GetComponent<UICashSummaryClass>().setData(i);
			tmpObj.transform.SetParent(m_viewPanel.transform);
			m_tmpList.Add(tmpObj);
		}
		gameObject.SetActive (true);
	}


	IEnumerator timer(){


		Debug.Log ("코루틴 시작");

		DateTime dateTime = AccountClass.GetInstance.anotherAccount.employeeRefreshTime;
		dateTime = dateTime.AddMinutes (5);

//		, new TimeSpan (0, 5, 0));
		TimeSpan timespan = dateTime - DateTime.Now;
		//저장된 시간 데이터 가져오기 = 현재 시간데이터 - 저장된 시간 데이터
		//5분을 넘기면 저장된 시간 데이터 초기화 및 리스트 새로고침

		while (m_refreshPanel.activeSelf) {

			if(!m_isRefreshBtn){


				if(timespan.Minutes <= 0 && timespan.Seconds <= 0){
					//직원 새로고칠 수 있음
	//				employeeSelectBtnEvent();
					//저장된 시간 새로고침
					m_isRefreshBtn = true;
				}

				timespan = dateTime - DateTime.Now;
	//			timespan = c_fiveMinute - DateTime.Now - AccountClass.GetInstance.anotherAccount.employeeRefreshTime;
				int min = (timespan.Minutes < 0) ? 0 : timespan.Minutes;
				int sec = (timespan.Seconds < 0) ? 0 : timespan.Seconds;
				m_refreshTimerText.text = string.Format("새로고침\n({0}:{1:d2})", min, sec);
				//Debug.Log("timespan : " + timespan);
				//남은시간 = (저장된 시간 - 현재시간) - 5분


				//시간 추가
				//시간 보여주기
				//시간이 오버되면 자동 새로고침
				//시간은 항상 기억하고 있어야 함
			}
			yield return new WaitForSeconds(0.1f);
		}
		//AccountClass.GetInstance.anotherAccount.employeeRefreshTime = DateTime.Now;

		
	}


	public bool removeEmployeeSummary(EmployeeClass employee){
		foreach (GameObject emp in m_tmpList) {
			if(emp.GetComponent<UIEmployeeSummaryClass>().employee.Equals(employee)){
				m_tmpList.Remove(emp);
				Destroy(emp);
				return true;
			}
		}
		return false;
	}

	public void refreshBtnClicked(){
		//비용 지불하기 여부
		//비용을 지불하고 자동 새로고침
		UIMadiatorClass.UIEffectSoundPlayer (TYPE_AUDIO.NONE);
		if (m_isRefreshBtn) {
			refreshBtnEvents(false);
			//공짜 새로고침
		} else {
			UIMadiatorClass.UIMsgPanelView.initMsgPanel("직원 이력서를 새로 받겠습니까?\n 5 파인콜라가 소모됩니다.", delegate { refreshBtnEvents(); }, null, TYPE_MSG_SIGN.OKCANCEL, TYPE_MSG_ICON.WARNING);
			//Debug.Log("유료 새로고침");
			//비용지불
		}


	}


	private void refreshBtnEvents(bool isPinecole = true){

		if (isPinecole) {
			AccountClass.GetInstance.usePineCola (5);
			UIMadiatorClass.UIEffectSoundPlayer (TYPE_AUDIO.COST);
		} else {
			UIMadiatorClass.UIEffectSoundPlayer(TYPE_AUDIO.OK);
		}

		if (co_timer != null) {
			StopCoroutine (co_timer);
			co_timer = null;
		}
		//새로고침 시간 기억
		//		AccountClass.GetInstance.anotherAccount.employeeRefreshTime = DateTime.Now;
		m_isRefreshBtn = true;
		
		employeeSelectBtnEvent();
	}

	protected override void OnDisable(){
		if(co_timer != null) StopCoroutine (co_timer);
		panelClear ();
		base.OnDisable ();
	}

	void panelClear(){
		foreach (GameObject tmpObj in m_tmpList) {
			Destroy(tmpObj);
		}
		
		m_tmpList.Clear ();
	}
}


