//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34209
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public enum TYPE_MSG_ICON{NONE, INFOR, WARNING, ERROR}
public enum TYPE_MSG_SIGN{OK, OKCANCEL, INFOR}
//메시지 사인
//ok 확인
//cancle 취소
//infor 정보

public class UIMsgClass : UIObjectClass, IPointerClickHandler
{
	
	public delegate void okBtnEventDelegate();
	public delegate void cancelBtnEventDelegate();
	okBtnEventDelegate okDel = null;
	cancelBtnEventDelegate cancelDel = null;

	Coroutine c_coroutine = null;

	[SerializeField] GameObject m_OkPanel;
	[SerializeField] GameObject m_OkCancelPanel;
	[SerializeField] Text m_titleText;
	[SerializeField] Text m_msgText;
	//사이즈 변경 및 이미지 삽입 등 필요
	//여러가지 타입이 필요
	//이미지형
	//큰 메시지형
	//작은 메시지형

//	public void initMsgPanel(string msg){
//		initMsgPanel (msg, TYPE_MSG_SIGN.INFOR, TYPE_MSG_ICON.NONE);
//	}

	/// <summary>
	/// 기본형 메시지 패널
	/// </summary>
	/// <param name="msg">Message.</param>
	/// <param name="msgIcon">Message icon.</param>
	public void initMsgPanel(string msg, TYPE_MSG_ICON msgIcon = TYPE_MSG_ICON.NONE){
		initMsgPanel (msg, TYPE_MSG_SIGN.INFOR, msgIcon);
	}

	/// <summary>
	/// ok, cancel버튼 메소드가 있는 메시지 패널
	/// </summary>
	/// <param name="msg">Message.</param>
	/// <param name="okBtnSelectMethod">Ok button select method.</param>
	/// <param name="cancelBtnSelectMethod">Cancel button select method.</param>
	/// <param name="msgType">Message type.</param>
	/// <param name="msgIcon">Message icon.</param>
	public void initMsgPanel(string msg, 
	                         okBtnEventDelegate okBtnSelectMethod, 
	                         cancelBtnEventDelegate cancelBtnSelectMethod, 
	                         TYPE_MSG_SIGN msgType = TYPE_MSG_SIGN.OKCANCEL, 
	                         TYPE_MSG_ICON msgIcon = TYPE_MSG_ICON.NONE){

		initMsgPanel (msg, okBtnSelectMethod, msgType, msgIcon);
		
		if(cancelBtnSelectMethod != null)
			cancelDel = new cancelBtnEventDelegate (cancelBtnSelectMethod);
	}

	/// <summary>
	/// ok 버튼 메소드가 있는 메시지 패널
	/// </summary>
	/// <param name="msg">Message.</param>
	/// <param name="okBtnSelectMethod">Ok button select method.</param>
	/// <param name="msgType">Message type.</param>
	/// <param name="msgIcon">Message icon.</param>
	public void initMsgPanel(string msg,
	                         okBtnEventDelegate okBtnSelectMethod, 
	                         TYPE_MSG_SIGN msgType = TYPE_MSG_SIGN.OKCANCEL, 
	                         TYPE_MSG_ICON msgIcon = TYPE_MSG_ICON.NONE){

		initMsgPanel (msg, msgType, msgIcon);
		
		if(okBtnSelectMethod != null)
			okDel = new okBtnEventDelegate (okBtnSelectMethod);
	}



	private void initMsgPanel(string msg, 
	                          TYPE_MSG_SIGN msgType = TYPE_MSG_SIGN.OK, 
	                          TYPE_MSG_ICON msgIcon = TYPE_MSG_ICON.NONE){
		
		
		gameObject.SetActive (true);
		
		m_msgText.text = msg;


		switch (msgIcon) {
		case TYPE_MSG_ICON.NONE:
			m_titleText.text = "메시지";
			effectSoundPlayer(TYPE_AUDIO.NONE);
			break;
		case TYPE_MSG_ICON.INFOR:
			m_titleText.text = "정보";
			effectSoundPlayer(TYPE_AUDIO.INFOR);
			break;
		case TYPE_MSG_ICON.WARNING:
			m_titleText.text = "경고!";
			effectSoundPlayer(TYPE_AUDIO.CANCEL);
			break;
		case TYPE_MSG_ICON.ERROR:
			m_titleText.text = "오류!!";
			effectSoundPlayer(TYPE_AUDIO.WARNING);
			break;
		}

		switch (msgType) {
		case TYPE_MSG_SIGN.INFOR:
			m_OkPanel.SetActive(false);
			m_OkCancelPanel.SetActive(false);
			c_coroutine = StartCoroutine(displayCountdown());
			break;
		case TYPE_MSG_SIGN.OK:
			m_OkPanel.SetActive(true);
			m_OkCancelPanel.SetActive(false);
			break;
		case TYPE_MSG_SIGN.OKCANCEL:
			m_OkPanel.SetActive(false);
			m_OkCancelPanel.SetActive(true);
			break;
		default:
			goto case TYPE_MSG_SIGN.INFOR;
		}
		
	}
	
	public void okBtnEvent(){
		effectSoundPlayer(TYPE_AUDIO.OK);
		if (okDel != null) {
			okDel ();
		}
		closeBtnEvent (true);
	}
	
	public void cancelBtnEvent(){
		effectSoundPlayer(TYPE_AUDIO.CANCEL);
		if (cancelDel != null) {
			cancelDel ();
		}
		closeBtnEvent (true);
	}
	
	
	
	public void closeBtnEvent(bool isSound = false){
		if(c_coroutine != null){
			StopCoroutine(c_coroutine);
			c_coroutine = null;
		}
		panelClose (isSound);
	}


	IEnumerator displayCountdown(){
		yield return new WaitForSeconds (1f);
		closeBtnEvent (false);
	}

	protected override void OnDisable (){
		base.OnDisable ();
	}

	public void OnPointerClick(PointerEventData point){
		closeBtnEvent (false);
	}
}


